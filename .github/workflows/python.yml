name: Python CI with pip and Docker

on:
  push:
    branches: [ "main" ]
    paths:
      - 'aplicacionPython/**'
      - '.github/workflows/python.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'aplicacionPython/**'
      - '.github/workflows/python.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    # Definimos variables para versionado usando secretos o variables de GitHub
    env:
      MAJOR_VERSION: ${{ vars.PYTHON_MAJOR_VERSION || '1' }}
      MINOR_VERSION: ${{ vars.PYTHON_MINOR_VERSION || '0' }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd aplicacionPython
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pylint black pytest

    - name: Lint with flake8
      run: |
        cd aplicacionPython
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Lint with pylint
      run: |
        cd aplicacionPython
        pylint app.py --exit-zero

    - name: Check formatting with black
      run: |
        cd aplicacionPython
        black --check --diff .

    - name: Test with pytest
      run: |
        cd aplicacionPython
        python -m pytest --verbose || echo "No hay tests definidos aún"

    - name: Run application test
      run: |
        cd aplicacionPython
        python -c "import app; print('Aplicación importada correctamente')"
        
  docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    env:
      MAJOR_VERSION: ${{ vars.PYTHON_MAJOR_VERSION || '1' }}
      MINOR_VERSION: ${{ vars.PYTHON_MINOR_VERSION || '0' }}

    steps:
    - uses: actions/checkout@v4
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
          
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # Genera la versión usando las variables de entorno y el número de ejecución del workflow    
    - name: Set version
      id: version
      run: echo "VERSION=${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.${{ github.run_number }}" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./aplicacionPython
        push: true
        build-args: |
          WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/clima-app-python:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/clima-app-python:${{ steps.version.outputs.VERSION }}
